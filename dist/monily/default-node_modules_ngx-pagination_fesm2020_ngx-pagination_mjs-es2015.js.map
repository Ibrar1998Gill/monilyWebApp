{"version":3,"sources":["./node_modules/ngx-pagination/fesm2020/ngx-pagination.mjs"],"names":["i0","PaginationService","constructor","change","EventEmitter","instances","DEFAULT_ID","defaultId","register","instance","id","updateInstance","changed","prop","getCurrentPage","currentPage","setCurrentPage","page","maxPage","Math","ceil","totalItems","itemsPerPage","emit","setTotalItems","setItemsPerPage","getInstance","clone","obj","target","i","hasOwnProperty","LARGE_NUMBER","Number","MAX_SAFE_INTEGER","PaginatePipe","service","state","transform","collection","args","Array","_id","slice","serverSideMode","length","createInstance","start","end","perPage","emitChange","isIdentical","stateIsIdentical","saveState","config","checkConfig","required","missing","filter","Error","join","size","isMetaDataIdentical","every","element","index","ɵfac","ɵpipe","type","Pipe","name","pure","DEFAULT_TEMPLATE","DEFAULT_STYLES","PaginationControlsDirective","changeDetectorRef","maxSize","pageChange","pageBoundsCorrection","pages","changeSub","subscribe","updatePageLinks","markForCheck","detectChanges","ngOnInit","undefined","ngOnChanges","changes","ngOnDestroy","unsubscribe","previous","checkValidId","setCurrent","getCurrent","next","isFirstPage","isLastPage","getLastPage","inst","getTotalItems","console","warn","correctedCurrentPage","outOfBoundCorrection","setTimeout","createPageArray","totalPages","paginationRange","max","halfWay","isStart","isEnd","isMiddle","ellipsesNeeded","label","pageNumber","calculatePageNumber","openingEllipsesNeeded","closingEllipsesNeeded","push","value","ɵdir","Directive","selector","exportAs","ChangeDetectorRef","Input","Output","coerceToBoolean","input","PaginationControlsComponent","previousLabel","nextLabel","screenReaderPaginationLabel","screenReaderPageLabel","screenReaderCurrentLabel","_directionLinks","_autoHide","_responsive","directionLinks","autoHide","responsive","trackByIndex","ɵcmp","i2","Component","template","styles","changeDetection","ChangeDetectionStrategy","encapsulation","ViewEncapsulation","None","NgxPaginationModule","ɵmod","ɵinj","CommonModule","NgModule","imports","declarations","providers","exports"],"mappings":";;;;;;;;;;;;;;;;;;;AAAoC;AAC0G;AACxG;AACS;AAAA;EAAA;IAAA,YAkNgDA,8DAAE;IAAFA,4DAAE,YA8XsuC;IA9XxuCA,wDAAE;MAAFA,2DAAE;MAAFA,2DAAE;MAAA,YAAFA,yDAAE;MAAA,OA8X8rC,cAAY;IAAA,EAAE;MA9X9sCA,2DAAE;MAAFA,2DAAE;MAAA,YAAFA,yDAAE;MAAA,OA8XutC,cAAY;IAAA,EAAvB;IA9X9sCA,oDAAE,GA8X4wC;IA9X9wCA,4DAAE,eA8XwyC;IA9X1yCA,oDAAE,GA8Xm0C;IA9Xr0CA,0DAAE,EA8X00C;IA9X50CA,0DAAE,EA8X41C;EAAA;EAAA;IAAA,eA9X91CA,2DAAE;IAAFA,uDAAE,GA8X4wC;IA9X9wCA,gEAAE,gCA8X4wC;IA9X9wCA,uDAAE,GA8Xm0C;IA9Xr0CA,+DAAE,8BA8Xm0C;EAAA;AAAA;AAAA;EAAA;IA9Xr0CA,4DAAE,eA8Xi6C;IA9Xn6CA,oDAAE,GA8Xu8C;IA9Xz8CA,4DAAE,eA8Xm+C;IA9Xr+CA,oDAAE,GA8X8/C;IA9XhgDA,0DAAE,EA8XqgD;IA9XvgDA,0DAAE,EA8X0hD;EAAA;EAAA;IAAA,eA9X5hDA,2DAAE;IAAFA,uDAAE,GA8Xu8C;IA9Xz8CA,gEAAE,gCA8Xu8C;IA9Xz8CA,uDAAE,GA8X8/C;IA9XhgDA,+DAAE,8BA8X8/C;EAAA;AAAA;AAAA;EAAA;IA9XhgDA,4DAAE,YA8XgnC;IA9XlnCA,wDAAE,sEA8X41C;IA9X91CA,wDAAE,4EA8X0hD;IA9X5hDA,0DAAE,EA8XyiD;EAAA;EAAA;IA9X3iDA,2DAAE;IAAA,YAAFA,yDAAE;IAAFA,yDAAE,+BA8XslC;IA9XxlCA,uDAAE,GA8X2qC;IA9X7qCA,wDAAE,8BA8X2qC;IA9X7qCA,uDAAE,GA8Xu4C;IA9Xz4CA,wDAAE,2BA8Xu4C;EAAA;AAAA;AAAA;EAAA;IAAA,aA9Xz4CA,8DAAE;IAAFA,4DAAE,YA8X++D;IA9Xj/DA,wDAAE;MAAFA,2DAAE;MAAA,iBAAFA,2DAAE;MAAFA,2DAAE;MAAA,YAAFA,yDAAE;MAAA,OA8Xu4D,8BAAwB;IAAA,EAAE;MA9Xn6DA,2DAAE;MAAA,iBAAFA,2DAAE;MAAFA,2DAAE;MAAA,YAAFA,yDAAE;MAAA,OA8X46D,8BAAwB;IAAA,EAAnC;IA9Xn6DA,4DAAE,eA8X6hE;IA9X/hEA,oDAAE,GA8XyjE;IA9X3jEA,0DAAE,EA8XgkE;IA9XlkEA,4DAAE,WA8XwlE;IA9X1lEA,oDAAE,GA8X4pE;IA9X9pEA,oDAAE;IAAFA,0DAAE,EA8XmqE;IA9XrqEA,0DAAE,EA8XqrE;EAAA;EAAA;IAAA,iBA9XvrEA,2DAAE;IAAA,gBAAFA,2DAAE;IAAFA,uDAAE,GA8XyjE;IA9X3jEA,gEAAE,wCA8XyjE;IA9X3jEA,uDAAE,GA8X4pE;IA9X9pEA,+DAAE,6CAAFA,yDAAE,2BA8X4pE;EAAA;AAAA;AAAA;EAAA;IA9X9pEA,qEAAE,GA8XyvE;IA9X3vEA,4DAAE,eA8XoyE;IA9XtyEA,4DAAE,eA8Xk1E;IA9Xp1EA,oDAAE,GA8Xi3E;IA9Xn3EA,0DAAE,EA8Xw3E;IA9X13EA,4DAAE,WA8Xg5E;IA9Xl5EA,oDAAE,GA8Xo9E;IA9Xt9EA,oDAAE;IAAFA,0DAAE,EA8X29E;IA9X79EA,0DAAE,EA8Xm/E;IA9Xr/EA,mEAAE,EA8XghF;EAAA;EAAA;IAAA,iBA9XlhFA,2DAAE;IAAA,gBAAFA,2DAAE;IAAFA,uDAAE,GA8Xi3E;IA9Xn3EA,gEAAE,2CA8Xi3E;IA9Xn3EA,uDAAE,GA8Xo9E;IA9Xt9EA,+DAAE,6CAAFA,yDAAE,2BA8Xo9E;EAAA;AAAA;AAAA;EAAA;IA9Xt9EA,4DAAE,SA8Xu1D;IA9Xz1DA,wDAAE,sEA8XqrE;IA9XvrEA,wDAAE,4FA8XghF;IA9XlhFA,0DAAE,EA8X+hF;EAAA;EAAA;IAAA;IA9XjiFA,2DAAE;IAAA,YAAFA,yDAAE;IAAFA,yDAAE,gDA8X2tD;IA9X7tDA,uDAAE,GA8X4+D;IA9X9+DA,wDAAE,6CA8X4+D;IA9X9+DA,uDAAE,GA8XsvE;IA9XxvEA,wDAAE,6CA8XsvE;EAAA;AAAA;AAAA;EAAA;IAAA,aA9XxvEA,8DAAE;IAAFA,4DAAE,YA8XgvF;IA9XlvFA,wDAAE;MAAFA,2DAAE;MAAFA,2DAAE;MAAA,YAAFA,yDAAE;MAAA,OA8XgtF,UAAQ;IAAA,EAAE;MA9X5tFA,2DAAE;MAAFA,2DAAE;MAAA,YAAFA,yDAAE;MAAA,OA8XquF,UAAQ;IAAA,EAAnB;IA9X5tFA,oDAAE,GA8XmxF;IA9XrxFA,4DAAE,eA8X+yF;IA9XjzFA,oDAAE,GA8X00F;IA9X50FA,0DAAE,EA8Xi1F;IA9Xn1FA,0DAAE,EA8Xm2F;EAAA;EAAA;IAAA,gBA9Xr2FA,2DAAE;IAAFA,uDAAE,GA8XmxF;IA9XrxFA,gEAAE,6BA8XmxF;IA9XrxFA,uDAAE,GA8X00F;IA9X50FA,+DAAE,+BA8X00F;EAAA;AAAA;AAAA;EAAA;IA9X50FA,4DAAE,eA8Xu6F;IA9Xz6FA,oDAAE,GA8X08F;IA9X58FA,4DAAE,eA8Xs+F;IA9Xx+FA,oDAAE,GA8XigG;IA9XngGA,0DAAE,EA8XwgG;IA9X1gGA,0DAAE,EA8X6hG;EAAA;EAAA;IAAA,gBA9X/hGA,2DAAE;IAAFA,uDAAE,GA8X08F;IA9X58FA,gEAAE,6BA8X08F;IA9X58FA,uDAAE,GA8XigG;IA9XngGA,+DAAE,+BA8XigG;EAAA;AAAA;AAAA;EAAA;IA9XngGA,4DAAE,aA8XsoF;IA9XxoFA,wDAAE,sEA8Xm2F;IA9Xr2FA,wDAAE,4EA8X6hG;IA9X/hGA,0DAAE,EA8X4iG;EAAA;EAAA;IA9X9iGA,2DAAE;IAAA,YAAFA,yDAAE;IAAFA,yDAAE,8BA8X4mF;IA9X9mFA,uDAAE,GA8X6rF;IA9X/rFA,wDAAE,2BA8X6rF;IA9X/rFA,uDAAE,GA8X64F;IA9X/4FA,wDAAE,0BA8X64F;EAAA;AAAA;AAAA;EAAA;IA9X/4FA,4DAAE,YA8XogC;IA9XtgCA,wDAAE,kEA8XyiD;IA9X3iDA,4DAAE,YA8XilD;IA9XnlDA,oDAAE,GA8XqpD;IA9XvpDA,0DAAE,EA8X0pD;IA9X5pDA,wDAAE,kEA8X+hF;IA9XjiFA,wDAAE,kEA8X4iG;IA9X9iGA,0DAAE,EA8XyjG;EAAA;EAAA;IAAA,eA9X3jGA,2DAAE;IAAA,YAAFA,yDAAE;IAAFA,yDAAE,iCA8X68B;IA9X/8BA,uDAAE,GA8X6mC;IA9X/mCA,wDAAE,+BA8X6mC;IA9X/mCA,uDAAE,GA8XqpD;IA9XvpDA,gEAAE,sDA8XqpD;IA9XvpDA,uDAAE,GA8X+zD;IA9Xj0DA,wDAAE,sBA8X+zD;IA9Xj0DA,uDAAE,GA8XmoF;IA9XroFA,wDAAE,+BA8XmoF;EAAA;AAAA;AA9kBpuF,MAAMC,iBAAiB,CAAC;EACpBC,WAAW,GAAG;IACV,IAAI,CAACC,MAAM,GAAG,IAAIC,uDAAY,EAAE;IAChC,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACC,UAAU,GAAG,uBAAuB;EAC7C;EACAC,SAAS,GAAG;IAAE,OAAO,IAAI,CAACD,UAAU;EAAE;EACtC;AACJ;AACA;AACA;AACA;EACIE,QAAQ,CAACC,QAAQ,EAAE;IACf,IAAIA,QAAQ,CAACC,EAAE,IAAI,IAAI,EAAE;MACrBD,QAAQ,CAACC,EAAE,GAAG,IAAI,CAACJ,UAAU;IACjC;IACA,IAAI,CAAC,IAAI,CAACD,SAAS,CAACI,QAAQ,CAACC,EAAE,CAAC,EAAE;MAC9B,IAAI,CAACL,SAAS,CAACI,QAAQ,CAACC,EAAE,CAAC,GAAGD,QAAQ;MACtC,OAAO,IAAI;IACf,CAAC,MACI;MACD,OAAO,IAAI,CAACE,cAAc,CAACF,QAAQ,CAAC;IACxC;EACJ;EACA;AACJ;AACA;AACA;EACIE,cAAc,CAACF,QAAQ,EAAE;IACrB,IAAIG,OAAO,GAAG,KAAK;IACnB,KAAK,IAAIC,IAAI,IAAI,IAAI,CAACR,SAAS,CAACI,QAAQ,CAACC,EAAE,CAAC,EAAE;MAC1C,IAAID,QAAQ,CAACI,IAAI,CAAC,KAAK,IAAI,CAACR,SAAS,CAACI,QAAQ,CAACC,EAAE,CAAC,CAACG,IAAI,CAAC,EAAE;QACtD,IAAI,CAACR,SAAS,CAACI,QAAQ,CAACC,EAAE,CAAC,CAACG,IAAI,CAAC,GAAGJ,QAAQ,CAACI,IAAI,CAAC;QAClDD,OAAO,GAAG,IAAI;MAClB;IACJ;IACA,OAAOA,OAAO;EAClB;EACA;AACJ;AACA;EACIE,cAAc,CAACJ,EAAE,EAAE;IACf,IAAI,IAAI,CAACL,SAAS,CAACK,EAAE,CAAC,EAAE;MACpB,OAAO,IAAI,CAACL,SAAS,CAACK,EAAE,CAAC,CAACK,WAAW;IACzC;IACA,OAAO,CAAC;EACZ;EACA;AACJ;AACA;EACIC,cAAc,CAACN,EAAE,EAAEO,IAAI,EAAE;IACrB,IAAI,IAAI,CAACZ,SAAS,CAACK,EAAE,CAAC,EAAE;MACpB,IAAID,QAAQ,GAAG,IAAI,CAACJ,SAAS,CAACK,EAAE,CAAC;MACjC,IAAIQ,OAAO,GAAGC,IAAI,CAACC,IAAI,CAACX,QAAQ,CAACY,UAAU,GAAGZ,QAAQ,CAACa,YAAY,CAAC;MACpE,IAAIL,IAAI,IAAIC,OAAO,IAAI,CAAC,IAAID,IAAI,EAAE;QAC9B,IAAI,CAACZ,SAAS,CAACK,EAAE,CAAC,CAACK,WAAW,GAAGE,IAAI;QACrC,IAAI,CAACd,MAAM,CAACoB,IAAI,CAACb,EAAE,CAAC;MACxB;IACJ;EACJ;EACA;AACJ;AACA;EACIc,aAAa,CAACd,EAAE,EAAEW,UAAU,EAAE;IAC1B,IAAI,IAAI,CAAChB,SAAS,CAACK,EAAE,CAAC,IAAI,CAAC,IAAIW,UAAU,EAAE;MACvC,IAAI,CAAChB,SAAS,CAACK,EAAE,CAAC,CAACW,UAAU,GAAGA,UAAU;MAC1C,IAAI,CAAClB,MAAM,CAACoB,IAAI,CAACb,EAAE,CAAC;IACxB;EACJ;EACA;AACJ;AACA;EACIe,eAAe,CAACf,EAAE,EAAEY,YAAY,EAAE;IAC9B,IAAI,IAAI,CAACjB,SAAS,CAACK,EAAE,CAAC,EAAE;MACpB,IAAI,CAACL,SAAS,CAACK,EAAE,CAAC,CAACY,YAAY,GAAGA,YAAY;MAC9C,IAAI,CAACnB,MAAM,CAACoB,IAAI,CAACb,EAAE,CAAC;IACxB;EACJ;EACA;AACJ;AACA;AACA;EACIgB,WAAW,CAAChB,EAAE,GAAG,IAAI,CAACJ,UAAU,EAAE;IAC9B,IAAI,IAAI,CAACD,SAAS,CAACK,EAAE,CAAC,EAAE;MACpB,OAAO,IAAI,CAACiB,KAAK,CAAC,IAAI,CAACtB,SAAS,CAACK,EAAE,CAAC,CAAC;IACzC;IACA,OAAO,CAAC,CAAC;EACb;EACA;AACJ;AACA;EACIiB,KAAK,CAACC,GAAG,EAAE;IACP,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,KAAK,IAAIC,CAAC,IAAIF,GAAG,EAAE;MACf,IAAIA,GAAG,CAACG,cAAc,CAACD,CAAC,CAAC,EAAE;QACvBD,MAAM,CAACC,CAAC,CAAC,GAAGF,GAAG,CAACE,CAAC,CAAC;MACtB;IACJ;IACA,OAAOD,MAAM;EACjB;AACJ;AAEA,MAAMG,YAAY,GAAGC,MAAM,CAACC,gBAAgB;AAC5C,MAAMC,YAAY,CAAC;EACfjC,WAAW,CAACkC,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB;IACA,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;EACnB;EACAC,SAAS,CAACC,UAAU,EAAEC,IAAI,EAAE;IACxB;IACA;IACA;IACA;IACA,IAAI,EAAED,UAAU,YAAYE,KAAK,CAAC,EAAE;MAChC,IAAIC,GAAG,GAAGF,IAAI,CAAC9B,EAAE,IAAI,IAAI,CAAC0B,OAAO,CAAC7B,SAAS,EAAE;MAC7C,IAAI,IAAI,CAAC8B,KAAK,CAACK,GAAG,CAAC,EAAE;QACjB,OAAO,IAAI,CAACL,KAAK,CAACK,GAAG,CAAC,CAACC,KAAK;MAChC,CAAC,MACI;QACD,OAAOJ,UAAU;MACrB;IACJ;IACA,IAAIK,cAAc,GAAGJ,IAAI,CAACnB,UAAU,IAAImB,IAAI,CAACnB,UAAU,KAAKkB,UAAU,CAACM,MAAM;IAC7E,IAAIpC,QAAQ,GAAG,IAAI,CAACqC,cAAc,CAACP,UAAU,EAAEC,IAAI,CAAC;IACpD,IAAI9B,EAAE,GAAGD,QAAQ,CAACC,EAAE;IACpB,IAAIqC,KAAK,EAAEC,GAAG;IACd,IAAIC,OAAO,GAAGxC,QAAQ,CAACa,YAAY;IACnC,IAAI4B,UAAU,GAAG,IAAI,CAACd,OAAO,CAAC5B,QAAQ,CAACC,QAAQ,CAAC;IAChD,IAAI,CAACmC,cAAc,IAAIL,UAAU,YAAYE,KAAK,EAAE;MAChDQ,OAAO,GAAG,CAACA,OAAO,IAAIjB,YAAY;MAClCe,KAAK,GAAG,CAACtC,QAAQ,CAACM,WAAW,GAAG,CAAC,IAAIkC,OAAO;MAC5CD,GAAG,GAAGD,KAAK,GAAGE,OAAO;MACrB,IAAIE,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAAC1C,EAAE,EAAE6B,UAAU,EAAEQ,KAAK,EAAEC,GAAG,CAAC;MACnE,IAAIG,WAAW,EAAE;QACb,OAAO,IAAI,CAACd,KAAK,CAAC3B,EAAE,CAAC,CAACiC,KAAK;MAC/B,CAAC,MACI;QACD,IAAIA,KAAK,GAAGJ,UAAU,CAACI,KAAK,CAACI,KAAK,EAAEC,GAAG,CAAC;QACxC,IAAI,CAACK,SAAS,CAAC3C,EAAE,EAAE6B,UAAU,EAAEI,KAAK,EAAEI,KAAK,EAAEC,GAAG,CAAC;QACjD,IAAI,CAACZ,OAAO,CAACjC,MAAM,CAACoB,IAAI,CAACb,EAAE,CAAC;QAC5B,OAAOiC,KAAK;MAChB;IACJ,CAAC,MACI;MACD,IAAIO,UAAU,EAAE;QACZ,IAAI,CAACd,OAAO,CAACjC,MAAM,CAACoB,IAAI,CAACb,EAAE,CAAC;MAChC;MACA;MACA;MACA,IAAI,CAAC2C,SAAS,CAAC3C,EAAE,EAAE6B,UAAU,EAAEA,UAAU,EAAEQ,KAAK,EAAEC,GAAG,CAAC;MACtD,OAAOT,UAAU;IACrB;EACJ;EACA;AACJ;AACA;EACIO,cAAc,CAACP,UAAU,EAAEe,MAAM,EAAE;IAC/B,IAAI,CAACC,WAAW,CAACD,MAAM,CAAC;IACxB,OAAO;MACH5C,EAAE,EAAE4C,MAAM,CAAC5C,EAAE,IAAI,IAAI,GAAG4C,MAAM,CAAC5C,EAAE,GAAG,IAAI,CAAC0B,OAAO,CAAC7B,SAAS,EAAE;MAC5De,YAAY,EAAE,CAACgC,MAAM,CAAChC,YAAY,IAAI,CAAC;MACvCP,WAAW,EAAE,CAACuC,MAAM,CAACvC,WAAW,IAAI,CAAC;MACrCM,UAAU,EAAE,CAACiC,MAAM,CAACjC,UAAU,IAAIkB,UAAU,CAACM;IACjD,CAAC;EACL;EACA;AACJ;AACA;EACIU,WAAW,CAACD,MAAM,EAAE;IAChB,MAAME,QAAQ,GAAG,CAAC,cAAc,EAAE,aAAa,CAAC;IAChD,MAAMC,OAAO,GAAGD,QAAQ,CAACE,MAAM,CAAC7C,IAAI,IAAI,EAAEA,IAAI,IAAIyC,MAAM,CAAC,CAAC;IAC1D,IAAI,CAAC,GAAGG,OAAO,CAACZ,MAAM,EAAE;MACpB,MAAM,IAAIc,KAAK,CAAE,wEAAuEF,OAAO,CAACG,IAAI,CAAC,IAAI,CAAE,EAAC,CAAC;IACjH;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIP,SAAS,CAAC3C,EAAE,EAAE6B,UAAU,EAAEI,KAAK,EAAEI,KAAK,EAAEC,GAAG,EAAE;IACzC,IAAI,CAACX,KAAK,CAAC3B,EAAE,CAAC,GAAG;MACb6B,UAAU;MACVsB,IAAI,EAAEtB,UAAU,CAACM,MAAM;MACvBF,KAAK;MACLI,KAAK;MACLC;IACJ,CAAC;EACL;EACA;AACJ;AACA;EACII,gBAAgB,CAAC1C,EAAE,EAAE6B,UAAU,EAAEQ,KAAK,EAAEC,GAAG,EAAE;IACzC,IAAIX,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC3B,EAAE,CAAC;IAC1B,IAAI,CAAC2B,KAAK,EAAE;MACR,OAAO,KAAK;IAChB;IACA,IAAIyB,mBAAmB,GAAGzB,KAAK,CAACwB,IAAI,KAAKtB,UAAU,CAACM,MAAM,IACtDR,KAAK,CAACU,KAAK,KAAKA,KAAK,IACrBV,KAAK,CAACW,GAAG,KAAKA,GAAG;IACrB,IAAI,CAACc,mBAAmB,EAAE;MACtB,OAAO,KAAK;IAChB;IACA,OAAOzB,KAAK,CAACM,KAAK,CAACoB,KAAK,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAKD,OAAO,KAAKzB,UAAU,CAACQ,KAAK,GAAGkB,KAAK,CAAC,CAAC;EACvF;AACJ;AACA9B,YAAY,CAAC+B,IAAI;EAAA,iBAAwF/B,YAAY,EAAtBnC,+DAAE,CAAsCC,iBAAiB;AAAA,CAAuC;AAC/LkC,YAAY,CAACgC,KAAK,kBAD6EnE,0DAAE;EAAA;EAAA,MACMmC,YAAY;EAAA;AAAA,EAAkC;AACrJ;EAAA,mDAF+FnC,+DAAE,CAENmC,YAAY,EAAc,CAAC;IAC1GiC,IAAI,EAAEC,+CAAI;IACV7B,IAAI,EAAE,CAAC;MACC8B,IAAI,EAAE,UAAU;MAChBC,IAAI,EAAE;IACV,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEH,IAAI,EAAEnE;IAAkB,CAAC,CAAC;EAAE,CAAC;AAAA;;AAEjF;AACA;AACA;AACA;AACA,MAAMuE,gBAAgB,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAMC,cAAc,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,MAAMC,2BAA2B,CAAC;EAC9BxE,WAAW,CAACkC,OAAO,EAAEuC,iBAAiB,EAAE;IACpC,IAAI,CAACvC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACuC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,OAAO,GAAG,CAAC;IAChB,IAAI,CAACC,UAAU,GAAG,IAAIzE,uDAAY,EAAE;IACpC,IAAI,CAAC0E,oBAAoB,GAAG,IAAI1E,uDAAY,EAAE;IAC9C,IAAI,CAAC2E,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,SAAS,GAAG,IAAI,CAAC5C,OAAO,CAA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","file":"default-node_modules_ngx-pagination_fesm2020_ngx-pagination_mjs-es2015.js","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Pipe, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass PaginationService {\r\n    constructor() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    defaultId() { return this.DEFAULT_ID; }\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    register(instance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            return true;\r\n        }\r\n        else {\r\n            return this.updateInstance(instance);\r\n        }\r\n    }\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    updateInstance(instance) {\r\n        let changed = false;\r\n        for (let prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    getCurrentPage(id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n        return 1;\r\n    }\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    setCurrentPage(id, page) {\r\n        if (this.instances[id]) {\r\n            let instance = this.instances[id];\r\n            let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    setTotalItems(id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    setItemsPerPage(id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    getInstance(id = this.DEFAULT_ID) {\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    }\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    clone(obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n}\n\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nclass PaginatePipe {\r\n    constructor(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    transform(collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            let _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        let serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        let instance = this.createInstance(collection, args);\r\n        let id = instance.id;\r\n        let start, end;\r\n        let perPage = instance.itemsPerPage;\r\n        let emitChange = this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            let isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                let slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        else {\r\n            if (emitChange) {\r\n                this.service.change.emit(id);\r\n            }\r\n            // save the state for server-side collection to avoid null\r\n            // flash as new data loads.\r\n            this.saveState(id, collection, collection, start, end);\r\n            return collection;\r\n        }\r\n    }\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    createInstance(collection, config) {\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    }\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    checkConfig(config) {\r\n        const required = ['itemsPerPage', 'currentPage'];\r\n        const missing = required.filter(prop => !(prop in config));\r\n        if (0 < missing.length) {\r\n            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\r\n        }\r\n    }\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    saveState(id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection,\r\n            size: collection.length,\r\n            slice,\r\n            start,\r\n            end\r\n        };\r\n    }\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    stateIsIdentical(id, collection, start, end) {\r\n        let state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        let isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every((element, index) => element === collection[start + index]);\r\n    }\r\n}\r\nPaginatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, deps: [{ token: PaginationService }], target: i0.ɵɵFactoryTarget.Pipe });\r\nPaginatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, name: \"paginate\", pure: false });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'paginate',\r\n                    pure: false\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }]; } });\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nconst DEFAULT_TEMPLATE = `\r\n    <pagination-template  #p=\"paginationApi\"\r\n                         [id]=\"id\"\r\n                         [maxSize]=\"maxSize\"\r\n                         (pageChange)=\"pageChange.emit($event)\"\r\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\r\n    <nav role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\">\r\n    <ul class=\"ngx-pagination\" \r\n        [class.responsive]=\"responsive\"\r\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\r\n\r\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \r\n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isFirstPage()\" aria-disabled=\"true\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li> \r\n\r\n        <li class=\"small-screen\">\r\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\r\n        </li>\r\n\r\n        <li [class.current]=\"p.getCurrent() === page.value\" \r\n            [class.ellipsis]=\"page.label === '...'\"\r\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\r\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\r\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\r\n            </a>\r\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\r\n              <span aria-live=\"polite\">\r\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \r\n              </span>\r\n            </ng-container>\r\n        </li>\r\n\r\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isLastPage()\" aria-disabled=\"true\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li>\r\n\r\n    </ul>\r\n    </nav>\r\n    </pagination-template>\r\n    `;\r\nconst DEFAULT_STYLES = `\r\n.ngx-pagination {\r\n  margin-left: 0;\r\n  margin-bottom: 1rem; }\r\n  .ngx-pagination::before, .ngx-pagination::after {\r\n    content: ' ';\r\n    display: table; }\r\n  .ngx-pagination::after {\r\n    clear: both; }\r\n  .ngx-pagination li {\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    margin-right: 0.0625rem;\r\n    border-radius: 0; }\r\n  .ngx-pagination li {\r\n    display: inline-block; }\r\n  .ngx-pagination a,\r\n  .ngx-pagination button {\r\n    color: #0a0a0a; \r\n    display: block;\r\n    padding: 0.1875rem 0.625rem;\r\n    border-radius: 0; }\r\n    .ngx-pagination a:hover,\r\n    .ngx-pagination button:hover {\r\n      background: #e6e6e6; }\r\n  .ngx-pagination .current {\r\n    padding: 0.1875rem 0.625rem;\r\n    background: #2199e8;\r\n    color: #fefefe;\r\n    cursor: default; }\r\n  .ngx-pagination .disabled {\r\n    padding: 0.1875rem 0.625rem;\r\n    color: #cacaca;\r\n    cursor: default; } \r\n    .ngx-pagination .disabled:hover {\r\n      background: transparent; }\r\n  .ngx-pagination a, .ngx-pagination button {\r\n    cursor: pointer; }\r\n\r\n.ngx-pagination .pagination-previous a::before,\r\n.ngx-pagination .pagination-previous.disabled::before { \r\n  content: '«';\r\n  display: inline-block;\r\n  margin-right: 0.5rem; }\r\n\r\n.ngx-pagination .pagination-next a::after,\r\n.ngx-pagination .pagination-next.disabled::after {\r\n  content: '»';\r\n  display: inline-block;\r\n  margin-left: 0.5rem; }\r\n\r\n.ngx-pagination .show-for-sr {\r\n  position: absolute !important;\r\n  width: 1px;\r\n  height: 1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0); }\r\n.ngx-pagination .small-screen {\r\n  display: none; }\r\n@media screen and (max-width: 601px) {\r\n  .ngx-pagination.responsive .small-screen {\r\n    display: inline-block; } \r\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\r\n    display: none; }\r\n}\r\n  `;\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nclass PaginationControlsDirective {\r\n    constructor(service, changeDetectorRef) {\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(id => {\r\n            if (this.id === id) {\r\n                this.updatePageLinks();\r\n                this.changeDetectorRef.markForCheck();\r\n                this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnChanges(changes) {\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnDestroy() {\r\n        this.changeSub.unsubscribe();\r\n    }\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    }\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    }\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    isFirstPage() {\r\n        return this.getCurrent() === 1;\r\n    }\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    isLastPage() {\r\n        return this.getLastPage() === this.getCurrent();\r\n    }\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    setCurrent(page) {\r\n        this.pageChange.emit(page);\r\n    }\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    getCurrent() {\r\n        return this.service.getCurrentPage(this.id);\r\n    }\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    getLastPage() {\r\n        let inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    }\r\n    getTotalItems() {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    }\r\n    checkValidId() {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\r\n        }\r\n    }\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    updatePageLinks() {\r\n        let inst = this.service.getInstance(this.id);\r\n        const correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(() => {\r\n                this.pageBoundsCorrection.emit(correctedCurrentPage);\r\n                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    }\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    outOfBoundCorrection(instance) {\r\n        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    }\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        let pages = [];\r\n        // Return 1 as default page number\r\n        // Make sense to show 1 instead of empty when there are no items\r\n        const totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\r\n        const halfWay = Math.ceil(paginationRange / 2);\r\n        const isStart = currentPage <= halfWay;\r\n        const isEnd = totalPages - halfWay < currentPage;\r\n        const isMiddle = !isStart && !isEnd;\r\n        let ellipsesNeeded = paginationRange < totalPages;\r\n        let i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            let label;\r\n            let pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            let openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            let closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    }\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    calculatePageNumber(i, currentPage, paginationRange, totalPages) {\r\n        let halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    }\r\n}\r\nPaginationControlsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, deps: [{ token: PaginationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nPaginationControlsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: { id: \"id\", maxSize: \"maxSize\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, exportAs: [\"paginationApi\"], usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'pagination-template,[pagination-template]',\r\n                    exportAs: 'paginationApi'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nclass PaginationControlsComponent {\r\n    constructor() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = `You're on page`;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    get directionLinks() {\r\n        return this._directionLinks;\r\n    }\r\n    set directionLinks(value) {\r\n        this._directionLinks = coerceToBoolean(value);\r\n    }\r\n    get autoHide() {\r\n        return this._autoHide;\r\n    }\r\n    set autoHide(value) {\r\n        this._autoHide = coerceToBoolean(value);\r\n    }\r\n    get responsive() {\r\n        return this._responsive;\r\n    }\r\n    set responsive(value) {\r\n        this._responsive = coerceToBoolean(value);\r\n    }\r\n    trackByIndex(index) {\r\n        return index;\r\n    }\r\n}\r\nPaginationControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPaginationControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsComponent, selector: \"pagination-controls\", inputs: { id: \"id\", maxSize: \"maxSize\", directionLinks: \"directionLinks\", autoHide: \"autoHide\", responsive: \"responsive\", previousLabel: \"previousLabel\", nextLabel: \"nextLabel\", screenReaderPaginationLabel: \"screenReaderPaginationLabel\", screenReaderPageLabel: \"screenReaderPageLabel\", screenReaderCurrentLabel: \"screenReaderCurrentLabel\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, ngImport: i0, template: \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\"\\n                         (pageBoundsCorrection)=\\\"pageBoundsCorrection.emit($event)\\\">\\n    <nav role=\\\"navigation\\\" [attr.aria-label]=\\\"screenReaderPaginationLabel\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\" aria-disabled=\\\"true\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages; trackBy: trackByIndex\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n              <span aria-live=\\\"polite\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \\n              </span>\\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\" aria-disabled=\\\"true\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </nav>\\n    </pagination-template>\\n    \", isInline: true, styles: [\".ngx-pagination{margin-left:0;margin-bottom:1rem}.ngx-pagination:before,.ngx-pagination:after{content:\\\" \\\";display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;margin-right:.0625rem;border-radius:0}.ngx-pagination li{display:inline-block}.ngx-pagination a,.ngx-pagination button{color:#0a0a0a;display:block;padding:.1875rem .625rem;border-radius:0}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{padding:.1875rem .625rem;background:#2199e8;color:#fefefe;cursor:default}.ngx-pagination .disabled{padding:.1875rem .625rem;color:#cacaca;cursor:default}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous a:before,.ngx-pagination .pagination-previous.disabled:before{content:\\\"\\\\ab\\\";display:inline-block;margin-right:.5rem}.ngx-pagination .pagination-next a:after,.ngx-pagination .pagination-next.disabled:after{content:\\\"\\\\bb\\\";display:inline-block;margin-left:.5rem}.ngx-pagination .show-for-sr{position:absolute!important;width:1px;height:1px;overflow:hidden;clip:rect(0,0,0,0)}.ngx-pagination .small-screen{display:none}@media screen and (max-width: 601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}\\n\"], directives: [{ type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: [\"id\", \"maxSize\"], outputs: [\"pageChange\", \"pageBoundsCorrection\"], exportAs: [\"paginationApi\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], pipes: { \"number\": i2.DecimalPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'pagination-controls',\r\n                    template: DEFAULT_TEMPLATE,\r\n                    styles: [DEFAULT_STYLES],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None\r\n                }]\r\n        }], propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], directionLinks: [{\r\n                type: Input\r\n            }], autoHide: [{\r\n                type: Input\r\n            }], responsive: [{\r\n                type: Input\r\n            }], previousLabel: [{\r\n                type: Input\r\n            }], nextLabel: [{\r\n                type: Input\r\n            }], screenReaderPaginationLabel: [{\r\n                type: Input\r\n            }], screenReaderPageLabel: [{\r\n                type: Input\r\n            }], screenReaderCurrentLabel: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nclass NgxPaginationModule {\r\n}\r\nNgxPaginationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxPaginationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, declarations: [PaginatePipe,\r\n        PaginationControlsComponent,\r\n        PaginationControlsDirective], imports: [CommonModule], exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective] });\r\nNgxPaginationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, providers: [PaginationService], imports: [[CommonModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [CommonModule],\r\n                    declarations: [\r\n                        PaginatePipe,\r\n                        PaginationControlsComponent,\r\n                        PaginationControlsDirective\r\n                    ],\r\n                    providers: [PaginationService],\r\n                    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-pagination\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPaginationModule, PaginatePipe, PaginationControlsComponent, PaginationControlsDirective, PaginationService };\n//# sourceMappingURL=ngx-pagination.mjs.map\n"],"sourceRoot":"webpack:///"}