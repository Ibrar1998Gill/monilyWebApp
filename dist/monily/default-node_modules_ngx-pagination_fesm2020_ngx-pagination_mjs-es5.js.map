{"version":3,"sources":["webpack:///node_modules/ngx-pagination/fesm2020/ngx-pagination.mjs"],"names":["i0","PaginationService","constructor","change","EventEmitter","instances","DEFAULT_ID","defaultId","register","instance","id","updateInstance","changed","prop","getCurrentPage","currentPage","setCurrentPage","page","maxPage","Math","ceil","totalItems","itemsPerPage","emit","setTotalItems","setItemsPerPage","getInstance","clone","obj","target","i","hasOwnProperty","LARGE_NUMBER","Number","MAX_SAFE_INTEGER","PaginatePipe","service","state","transform","collection","args","Array","_id","slice","serverSideMode","length","createInstance","start","end","perPage","emitChange","isIdentical","stateIsIdentical","saveState","config","checkConfig","required","missing","filter","Error","join","size","isMetaDataIdentical","every","element","index","ɵfac","ɵpipe","type","Pipe","name","pure","DEFAULT_TEMPLATE","DEFAULT_STYLES","PaginationControlsDirective","changeDetectorRef","maxSize","pageChange","pageBoundsCorrection","pages","changeSub","subscribe","updatePageLinks","markForCheck","detectChanges","ngOnInit","undefined","ngOnChanges","changes","ngOnDestroy","unsubscribe","previous","checkValidId","setCurrent","getCurrent","next","isFirstPage","isLastPage","getLastPage","inst","getTotalItems","console","warn","correctedCurrentPage","outOfBoundCorrection","setTimeout","createPageArray","totalPages","paginationRange","max","halfWay","isStart","isEnd","isMiddle","ellipsesNeeded","label","pageNumber","calculatePageNumber","openingEllipsesNeeded","closingEllipsesNeeded","push","value","ɵdir","Directive","selector","exportAs","Input","Output","coerceToBoolean","input","PaginationControlsComponent","previousLabel","nextLabel","screenReaderPaginationLabel","screenReaderPageLabel","screenReaderCurrentLabel","_directionLinks","_autoHide","_responsive","trackByIndex","ɵcmp","i2","Component","template","styles","changeDetection","ChangeDetectionStrategy","encapsulation","ViewEncapsulation","directionLinks","autoHide","responsive","NgxPaginationModule","ɵmod","ɵinj","CommonModule","NgModule","imports","declarations","providers","exports"],"mappings":"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","file":"default-node_modules_ngx-pagination_fesm2020_ngx-pagination_mjs-es5.js","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Pipe, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass PaginationService {\r\n    constructor() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    defaultId() { return this.DEFAULT_ID; }\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    register(instance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            return true;\r\n        }\r\n        else {\r\n            return this.updateInstance(instance);\r\n        }\r\n    }\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    updateInstance(instance) {\r\n        let changed = false;\r\n        for (let prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    getCurrentPage(id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n        return 1;\r\n    }\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    setCurrentPage(id, page) {\r\n        if (this.instances[id]) {\r\n            let instance = this.instances[id];\r\n            let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    setTotalItems(id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    setItemsPerPage(id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    getInstance(id = this.DEFAULT_ID) {\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    }\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    clone(obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n}\n\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nclass PaginatePipe {\r\n    constructor(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    transform(collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            let _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        let serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        let instance = this.createInstance(collection, args);\r\n        let id = instance.id;\r\n        let start, end;\r\n        let perPage = instance.itemsPerPage;\r\n        let emitChange = this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            let isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                let slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        else {\r\n            if (emitChange) {\r\n                this.service.change.emit(id);\r\n            }\r\n            // save the state for server-side collection to avoid null\r\n            // flash as new data loads.\r\n            this.saveState(id, collection, collection, start, end);\r\n            return collection;\r\n        }\r\n    }\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    createInstance(collection, config) {\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    }\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    checkConfig(config) {\r\n        const required = ['itemsPerPage', 'currentPage'];\r\n        const missing = required.filter(prop => !(prop in config));\r\n        if (0 < missing.length) {\r\n            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\r\n        }\r\n    }\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    saveState(id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection,\r\n            size: collection.length,\r\n            slice,\r\n            start,\r\n            end\r\n        };\r\n    }\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    stateIsIdentical(id, collection, start, end) {\r\n        let state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        let isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every((element, index) => element === collection[start + index]);\r\n    }\r\n}\r\nPaginatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, deps: [{ token: PaginationService }], target: i0.ɵɵFactoryTarget.Pipe });\r\nPaginatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, name: \"paginate\", pure: false });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'paginate',\r\n                    pure: false\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }]; } });\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nconst DEFAULT_TEMPLATE = `\r\n    <pagination-template  #p=\"paginationApi\"\r\n                         [id]=\"id\"\r\n                         [maxSize]=\"maxSize\"\r\n                         (pageChange)=\"pageChange.emit($event)\"\r\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\r\n    <nav role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\">\r\n    <ul class=\"ngx-pagination\" \r\n        [class.responsive]=\"responsive\"\r\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\r\n\r\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \r\n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isFirstPage()\" aria-disabled=\"true\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li> \r\n\r\n        <li class=\"small-screen\">\r\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\r\n        </li>\r\n\r\n        <li [class.current]=\"p.getCurrent() === page.value\" \r\n            [class.ellipsis]=\"page.label === '...'\"\r\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\r\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\r\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\r\n            </a>\r\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\r\n              <span aria-live=\"polite\">\r\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \r\n              </span>\r\n            </ng-container>\r\n        </li>\r\n\r\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isLastPage()\" aria-disabled=\"true\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li>\r\n\r\n    </ul>\r\n    </nav>\r\n    </pagination-template>\r\n    `;\r\nconst DEFAULT_STYLES = `\r\n.ngx-pagination {\r\n  margin-left: 0;\r\n  margin-bottom: 1rem; }\r\n  .ngx-pagination::before, .ngx-pagination::after {\r\n    content: ' ';\r\n    display: table; }\r\n  .ngx-pagination::after {\r\n    clear: both; }\r\n  .ngx-pagination li {\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    margin-right: 0.0625rem;\r\n    border-radius: 0; }\r\n  .ngx-pagination li {\r\n    display: inline-block; }\r\n  .ngx-pagination a,\r\n  .ngx-pagination button {\r\n    color: #0a0a0a; \r\n    display: block;\r\n    padding: 0.1875rem 0.625rem;\r\n    border-radius: 0; }\r\n    .ngx-pagination a:hover,\r\n    .ngx-pagination button:hover {\r\n      background: #e6e6e6; }\r\n  .ngx-pagination .current {\r\n    padding: 0.1875rem 0.625rem;\r\n    background: #2199e8;\r\n    color: #fefefe;\r\n    cursor: default; }\r\n  .ngx-pagination .disabled {\r\n    padding: 0.1875rem 0.625rem;\r\n    color: #cacaca;\r\n    cursor: default; } \r\n    .ngx-pagination .disabled:hover {\r\n      background: transparent; }\r\n  .ngx-pagination a, .ngx-pagination button {\r\n    cursor: pointer; }\r\n\r\n.ngx-pagination .pagination-previous a::before,\r\n.ngx-pagination .pagination-previous.disabled::before { \r\n  content: '«';\r\n  display: inline-block;\r\n  margin-right: 0.5rem; }\r\n\r\n.ngx-pagination .pagination-next a::after,\r\n.ngx-pagination .pagination-next.disabled::after {\r\n  content: '»';\r\n  display: inline-block;\r\n  margin-left: 0.5rem; }\r\n\r\n.ngx-pagination .show-for-sr {\r\n  position: absolute !important;\r\n  width: 1px;\r\n  height: 1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0); }\r\n.ngx-pagination .small-screen {\r\n  display: none; }\r\n@media screen and (max-width: 601px) {\r\n  .ngx-pagination.responsive .small-screen {\r\n    display: inline-block; } \r\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\r\n    display: none; }\r\n}\r\n  `;\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nclass PaginationControlsDirective {\r\n    constructor(service, changeDetectorRef) {\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(id => {\r\n            if (this.id === id) {\r\n                this.updatePageLinks();\r\n                this.changeDetectorRef.markForCheck();\r\n                this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnChanges(changes) {\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnDestroy() {\r\n        this.changeSub.unsubscribe();\r\n    }\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    }\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    }\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    isFirstPage() {\r\n        return this.getCurrent() === 1;\r\n    }\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    isLastPage() {\r\n        return this.getLastPage() === this.getCurrent();\r\n    }\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    setCurrent(page) {\r\n        this.pageChange.emit(page);\r\n    }\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    getCurrent() {\r\n        return this.service.getCurrentPage(this.id);\r\n    }\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    getLastPage() {\r\n        let inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    }\r\n    getTotalItems() {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    }\r\n    checkValidId() {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\r\n        }\r\n    }\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    updatePageLinks() {\r\n        let inst = this.service.getInstance(this.id);\r\n        const correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(() => {\r\n                this.pageBoundsCorrection.emit(correctedCurrentPage);\r\n                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    }\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    outOfBoundCorrection(instance) {\r\n        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    }\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        let pages = [];\r\n        // Return 1 as default page number\r\n        // Make sense to show 1 instead of empty when there are no items\r\n        const totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\r\n        const halfWay = Math.ceil(paginationRange / 2);\r\n        const isStart = currentPage <= halfWay;\r\n        const isEnd = totalPages - halfWay < currentPage;\r\n        const isMiddle = !isStart && !isEnd;\r\n        let ellipsesNeeded = paginationRange < totalPages;\r\n        let i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            let label;\r\n            let pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            let openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            let closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    }\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    calculatePageNumber(i, currentPage, paginationRange, totalPages) {\r\n        let halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    }\r\n}\r\nPaginationControlsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, deps: [{ token: PaginationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nPaginationControlsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: { id: \"id\", maxSize: \"maxSize\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, exportAs: [\"paginationApi\"], usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'pagination-template,[pagination-template]',\r\n                    exportAs: 'paginationApi'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nclass PaginationControlsComponent {\r\n    constructor() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = `You're on page`;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    get directionLinks() {\r\n        return this._directionLinks;\r\n    }\r\n    set directionLinks(value) {\r\n        this._directionLinks = coerceToBoolean(value);\r\n    }\r\n    get autoHide() {\r\n        return this._autoHide;\r\n    }\r\n    set autoHide(value) {\r\n        this._autoHide = coerceToBoolean(value);\r\n    }\r\n    get responsive() {\r\n        return this._responsive;\r\n    }\r\n    set responsive(value) {\r\n        this._responsive = coerceToBoolean(value);\r\n    }\r\n    trackByIndex(index) {\r\n        return index;\r\n    }\r\n}\r\nPaginationControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPaginationControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsComponent, selector: \"pagination-controls\", inputs: { id: \"id\", maxSize: \"maxSize\", directionLinks: \"directionLinks\", autoHide: \"autoHide\", responsive: \"responsive\", previousLabel: \"previousLabel\", nextLabel: \"nextLabel\", screenReaderPaginationLabel: \"screenReaderPaginationLabel\", screenReaderPageLabel: \"screenReaderPageLabel\", screenReaderCurrentLabel: \"screenReaderCurrentLabel\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, ngImport: i0, template: \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\"\\n                         (pageBoundsCorrection)=\\\"pageBoundsCorrection.emit($event)\\\">\\n    <nav role=\\\"navigation\\\" [attr.aria-label]=\\\"screenReaderPaginationLabel\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\" aria-disabled=\\\"true\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages; trackBy: trackByIndex\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n              <span aria-live=\\\"polite\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \\n              </span>\\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\" aria-disabled=\\\"true\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </nav>\\n    </pagination-template>\\n    \", isInline: true, styles: [\".ngx-pagination{margin-left:0;margin-bottom:1rem}.ngx-pagination:before,.ngx-pagination:after{content:\\\" \\\";display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;margin-right:.0625rem;border-radius:0}.ngx-pagination li{display:inline-block}.ngx-pagination a,.ngx-pagination button{color:#0a0a0a;display:block;padding:.1875rem .625rem;border-radius:0}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{padding:.1875rem .625rem;background:#2199e8;color:#fefefe;cursor:default}.ngx-pagination .disabled{padding:.1875rem .625rem;color:#cacaca;cursor:default}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous a:before,.ngx-pagination .pagination-previous.disabled:before{content:\\\"\\\\ab\\\";display:inline-block;margin-right:.5rem}.ngx-pagination .pagination-next a:after,.ngx-pagination .pagination-next.disabled:after{content:\\\"\\\\bb\\\";display:inline-block;margin-left:.5rem}.ngx-pagination .show-for-sr{position:absolute!important;width:1px;height:1px;overflow:hidden;clip:rect(0,0,0,0)}.ngx-pagination .small-screen{display:none}@media screen and (max-width: 601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}\\n\"], directives: [{ type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: [\"id\", \"maxSize\"], outputs: [\"pageChange\", \"pageBoundsCorrection\"], exportAs: [\"paginationApi\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], pipes: { \"number\": i2.DecimalPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'pagination-controls',\r\n                    template: DEFAULT_TEMPLATE,\r\n                    styles: [DEFAULT_STYLES],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None\r\n                }]\r\n        }], propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], directionLinks: [{\r\n                type: Input\r\n            }], autoHide: [{\r\n                type: Input\r\n            }], responsive: [{\r\n                type: Input\r\n            }], previousLabel: [{\r\n                type: Input\r\n            }], nextLabel: [{\r\n                type: Input\r\n            }], screenReaderPaginationLabel: [{\r\n                type: Input\r\n            }], screenReaderPageLabel: [{\r\n                type: Input\r\n            }], screenReaderCurrentLabel: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nclass NgxPaginationModule {\r\n}\r\nNgxPaginationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxPaginationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, declarations: [PaginatePipe,\r\n        PaginationControlsComponent,\r\n        PaginationControlsDirective], imports: [CommonModule], exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective] });\r\nNgxPaginationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, providers: [PaginationService], imports: [[CommonModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [CommonModule],\r\n                    declarations: [\r\n                        PaginatePipe,\r\n                        PaginationControlsComponent,\r\n                        PaginationControlsDirective\r\n                    ],\r\n                    providers: [PaginationService],\r\n                    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-pagination\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPaginationModule, PaginatePipe, PaginationControlsComponent, PaginationControlsDirective, PaginationService };\n//# sourceMappingURL=ngx-pagination.mjs.map\n"]}